//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/SebastianDremo/Projects/Fluq/Parsing/Grammar/FluqParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class FluqParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		FUNC=1, TEXT=2, INT=3, PRINT=4, PLUS=5, MINUS=6, EQUALS=7, OPEN_BRACKET=8, 
		CLOSE_BRACKET=9, OPEN_CURLY_BRACKET=10, CLOSE_CURLY_BRACKET=11, COMMA=12, 
		DOT=13, ID=14, NUMBER=15, STRING=16, NEWLINE=17, WS=18;
	public const int
		RULE_fluq_program = 0, RULE_statement = 1, RULE_func_declaration = 2, 
		RULE_func_call = 3, RULE_func_body = 4, RULE_func_declaration_params = 5, 
		RULE_func_call_params = 6, RULE_built_in_func = 7, RULE_print_func = 8, 
		RULE_expression = 9, RULE_var_type = 10;
	public static readonly string[] ruleNames = {
		"fluq_program", "statement", "func_declaration", "func_call", "func_body", 
		"func_declaration_params", "func_call_params", "built_in_func", "print_func", 
		"expression", "var_type"
	};

	private static readonly string[] _LiteralNames = {
		null, "'FUNC'", "'TEXT'", "'INT'", "'PRINT'", "'+'", "'-'", "'='", "'('", 
		"')'", "'{'", "'}'", "','", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FUNC", "TEXT", "INT", "PRINT", "PLUS", "MINUS", "EQUALS", "OPEN_BRACKET", 
		"CLOSE_BRACKET", "OPEN_CURLY_BRACKET", "CLOSE_CURLY_BRACKET", "COMMA", 
		"DOT", "ID", "NUMBER", "STRING", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FluqParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static FluqParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FluqParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FluqParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Fluq_programContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Fluq_programContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fluq_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.EnterFluq_program(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.ExitFluq_program(this);
		}
	}

	[RuleVersion(0)]
	public Fluq_programContext fluq_program() {
		Fluq_programContext _localctx = new Fluq_programContext(Context, State);
		EnterRule(_localctx, 0, RULE_fluq_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 22;
				statement();
				}
				}
				State = 25;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 147486L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CallContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_callContext func_call() {
			return GetRuleContext<Func_callContext>(0);
		}
		public CallContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
	}
	public partial class NewlineContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(FluqParser.NEWLINE, 0); }
		public NewlineContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.EnterNewline(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.ExitNewline(this);
		}
	}
	public partial class Var_assignContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_typeContext var_type() {
			return GetRuleContext<Var_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FluqParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(FluqParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Var_assignContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.EnterVar_assign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.ExitVar_assign(this);
		}
	}
	public partial class Func_declareContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_declarationContext func_declaration() {
			return GetRuleContext<Func_declarationContext>(0);
		}
		public Func_declareContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.EnterFunc_declare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.ExitFunc_declare(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 35;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TEXT:
			case INT:
				_localctx = new Var_assignContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 27;
				var_type();
				State = 28;
				Match(ID);
				State = 29;
				Match(EQUALS);
				State = 30;
				expression(0);
				}
				break;
			case FUNC:
				_localctx = new Func_declareContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 32;
				func_declaration();
				}
				break;
			case PRINT:
			case ID:
				_localctx = new CallContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 33;
				func_call();
				}
				break;
			case NEWLINE:
				_localctx = new NewlineContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 34;
				Match(NEWLINE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_declarationContext : ParserRuleContext {
		public IToken func_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(FluqParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(FluqParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(FluqParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_CURLY_BRACKET() { return GetToken(FluqParser.OPEN_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_bodyContext func_body() {
			return GetRuleContext<Func_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_CURLY_BRACKET() { return GetToken(FluqParser.CLOSE_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FluqParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_declaration_paramsContext func_declaration_params() {
			return GetRuleContext<Func_declaration_paramsContext>(0);
		}
		public Func_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.EnterFunc_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.ExitFunc_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Func_declarationContext func_declaration() {
		Func_declarationContext _localctx = new Func_declarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_func_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			Match(FUNC);
			State = 38;
			_localctx.func_name = Match(ID);
			State = 39;
			Match(OPEN_BRACKET);
			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 40;
				func_declaration_params();
				}
			}

			State = 43;
			Match(CLOSE_BRACKET);
			State = 44;
			Match(OPEN_CURLY_BRACKET);
			State = 45;
			func_body();
			State = 46;
			Match(CLOSE_CURLY_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FluqParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(FluqParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(FluqParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_call_paramsContext func_call_params() {
			return GetRuleContext<Func_call_paramsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Built_in_funcContext built_in_func() {
			return GetRuleContext<Built_in_funcContext>(0);
		}
		public Func_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.EnterFunc_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.ExitFunc_call(this);
		}
	}

	[RuleVersion(0)]
	public Func_callContext func_call() {
		Func_callContext _localctx = new Func_callContext(Context, State);
		EnterRule(_localctx, 6, RULE_func_call);
		int _la;
		try {
			State = 55;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48;
				Match(ID);
				State = 49;
				Match(OPEN_BRACKET);
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 114944L) != 0)) {
					{
					State = 50;
					func_call_params();
					}
				}

				State = 53;
				Match(CLOSE_BRACKET);
				}
				break;
			case PRINT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 54;
				built_in_func();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Func_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.EnterFunc_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.ExitFunc_body(this);
		}
	}

	[RuleVersion(0)]
	public Func_bodyContext func_body() {
		Func_bodyContext _localctx = new Func_bodyContext(Context, State);
		EnterRule(_localctx, 8, RULE_func_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 147486L) != 0)) {
				{
				{
				State = 57;
				statement();
				}
				}
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_declaration_paramsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(FluqParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(FluqParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FluqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FluqParser.COMMA, i);
		}
		public Func_declaration_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_declaration_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.EnterFunc_declaration_params(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.ExitFunc_declaration_params(this);
		}
	}

	[RuleVersion(0)]
	public Func_declaration_paramsContext func_declaration_params() {
		Func_declaration_paramsContext _localctx = new Func_declaration_paramsContext(Context, State);
		EnterRule(_localctx, 10, RULE_func_declaration_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			Match(ID);
			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 64;
				Match(COMMA);
				State = 65;
				Match(ID);
				}
				}
				State = 70;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_call_paramsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FluqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FluqParser.COMMA, i);
		}
		public Func_call_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_call_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.EnterFunc_call_params(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.ExitFunc_call_params(this);
		}
	}

	[RuleVersion(0)]
	public Func_call_paramsContext func_call_params() {
		Func_call_paramsContext _localctx = new Func_call_paramsContext(Context, State);
		EnterRule(_localctx, 12, RULE_func_call_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			expression(0);
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 72;
				Match(COMMA);
				State = 73;
				expression(0);
				}
				}
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Built_in_funcContext : ParserRuleContext {
		public Built_in_funcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_built_in_func; } }
	 
		public Built_in_funcContext() { }
		public virtual void CopyFrom(Built_in_funcContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrintContext : Built_in_funcContext {
		[System.Diagnostics.DebuggerNonUserCode] public Print_funcContext print_func() {
			return GetRuleContext<Print_funcContext>(0);
		}
		public PrintContext(Built_in_funcContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
	}

	[RuleVersion(0)]
	public Built_in_funcContext built_in_func() {
		Built_in_funcContext _localctx = new Built_in_funcContext(Context, State);
		EnterRule(_localctx, 14, RULE_built_in_func);
		try {
			_localctx = new PrintContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			print_func();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Print_funcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(FluqParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(FluqParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_call_paramsContext func_call_params() {
			return GetRuleContext<Func_call_paramsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(FluqParser.CLOSE_BRACKET, 0); }
		public Print_funcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print_func; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.EnterPrint_func(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.ExitPrint_func(this);
		}
	}

	[RuleVersion(0)]
	public Print_funcContext print_func() {
		Print_funcContext _localctx = new Print_funcContext(Context, State);
		EnterRule(_localctx, 16, RULE_print_func);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			Match(PRINT);
			State = 82;
			Match(OPEN_BRACKET);
			State = 83;
			func_call_params();
			State = 84;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StrContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(FluqParser.STRING, 0); }
		public StrContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.EnterStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.ExitStr(this);
		}
	}
	public partial class VarContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FluqParser.ID, 0); }
		public VarContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
	}
	public partial class NumContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(FluqParser.NUMBER, 0); }
		public NumContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.EnterNum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.ExitNum(this);
		}
	}
	public partial class MathContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(FluqParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(FluqParser.MINUS, 0); }
		public MathContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.EnterMath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.ExitMath(this);
		}
	}
	public partial class Bracket_exprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(FluqParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(FluqParser.CLOSE_BRACKET, 0); }
		public Bracket_exprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.EnterBracket_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.ExitBracket_expr(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				_localctx = new NumContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 87;
				Match(NUMBER);
				}
				break;
			case ID:
				{
				_localctx = new VarContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 88;
				Match(ID);
				}
				break;
			case STRING:
				{
				_localctx = new StrContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 89;
				Match(STRING);
				}
				break;
			case OPEN_BRACKET:
				{
				_localctx = new Bracket_exprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 90;
				Match(OPEN_BRACKET);
				State = 91;
				expression(0);
				State = 92;
				Match(CLOSE_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 101;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MathContext(new ExpressionContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 96;
					if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
					State = 97;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 98;
					expression(6);
					}
					} 
				}
				State = 103;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Var_typeContext : ParserRuleContext {
		public Var_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_type; } }
	 
		public Var_typeContext() { }
		public virtual void CopyFrom(Var_typeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TextContext : Var_typeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(FluqParser.TEXT, 0); }
		public TextContext(Var_typeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
	}
	public partial class IntContext : Var_typeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(FluqParser.INT, 0); }
		public IntContext(Var_typeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFluqParserListener typedListener = listener as IFluqParserListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
	}

	[RuleVersion(0)]
	public Var_typeContext var_type() {
		Var_typeContext _localctx = new Var_typeContext(Context, State);
		EnterRule(_localctx, 20, RULE_var_type);
		try {
			State = 106;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TEXT:
				_localctx = new TextContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 104;
				Match(TEXT);
				}
				break;
			case INT:
				_localctx = new IntContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 105;
				Match(INT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,18,109,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,4,0,24,8,0,11,0,12,0,25,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,3,1,36,8,1,1,2,1,2,1,2,1,2,3,2,42,8,2,1,2,1,2,1,2,
		1,2,1,2,1,3,1,3,1,3,3,3,52,8,3,1,3,1,3,3,3,56,8,3,1,4,5,4,59,8,4,10,4,
		12,4,62,9,4,1,5,1,5,1,5,5,5,67,8,5,10,5,12,5,70,9,5,1,6,1,6,1,6,5,6,75,
		8,6,10,6,12,6,78,9,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,
		9,1,9,1,9,3,9,95,8,9,1,9,1,9,1,9,5,9,100,8,9,10,9,12,9,103,9,9,1,10,1,
		10,3,10,107,8,10,1,10,0,1,18,11,0,2,4,6,8,10,12,14,16,18,20,0,1,1,0,5,
		6,112,0,23,1,0,0,0,2,35,1,0,0,0,4,37,1,0,0,0,6,55,1,0,0,0,8,60,1,0,0,0,
		10,63,1,0,0,0,12,71,1,0,0,0,14,79,1,0,0,0,16,81,1,0,0,0,18,94,1,0,0,0,
		20,106,1,0,0,0,22,24,3,2,1,0,23,22,1,0,0,0,24,25,1,0,0,0,25,23,1,0,0,0,
		25,26,1,0,0,0,26,1,1,0,0,0,27,28,3,20,10,0,28,29,5,14,0,0,29,30,5,7,0,
		0,30,31,3,18,9,0,31,36,1,0,0,0,32,36,3,4,2,0,33,36,3,6,3,0,34,36,5,17,
		0,0,35,27,1,0,0,0,35,32,1,0,0,0,35,33,1,0,0,0,35,34,1,0,0,0,36,3,1,0,0,
		0,37,38,5,1,0,0,38,39,5,14,0,0,39,41,5,8,0,0,40,42,3,10,5,0,41,40,1,0,
		0,0,41,42,1,0,0,0,42,43,1,0,0,0,43,44,5,9,0,0,44,45,5,10,0,0,45,46,3,8,
		4,0,46,47,5,11,0,0,47,5,1,0,0,0,48,49,5,14,0,0,49,51,5,8,0,0,50,52,3,12,
		6,0,51,50,1,0,0,0,51,52,1,0,0,0,52,53,1,0,0,0,53,56,5,9,0,0,54,56,3,14,
		7,0,55,48,1,0,0,0,55,54,1,0,0,0,56,7,1,0,0,0,57,59,3,2,1,0,58,57,1,0,0,
		0,59,62,1,0,0,0,60,58,1,0,0,0,60,61,1,0,0,0,61,9,1,0,0,0,62,60,1,0,0,0,
		63,68,5,14,0,0,64,65,5,12,0,0,65,67,5,14,0,0,66,64,1,0,0,0,67,70,1,0,0,
		0,68,66,1,0,0,0,68,69,1,0,0,0,69,11,1,0,0,0,70,68,1,0,0,0,71,76,3,18,9,
		0,72,73,5,12,0,0,73,75,3,18,9,0,74,72,1,0,0,0,75,78,1,0,0,0,76,74,1,0,
		0,0,76,77,1,0,0,0,77,13,1,0,0,0,78,76,1,0,0,0,79,80,3,16,8,0,80,15,1,0,
		0,0,81,82,5,4,0,0,82,83,5,8,0,0,83,84,3,12,6,0,84,85,5,9,0,0,85,17,1,0,
		0,0,86,87,6,9,-1,0,87,95,5,15,0,0,88,95,5,14,0,0,89,95,5,16,0,0,90,91,
		5,8,0,0,91,92,3,18,9,0,92,93,5,9,0,0,93,95,1,0,0,0,94,86,1,0,0,0,94,88,
		1,0,0,0,94,89,1,0,0,0,94,90,1,0,0,0,95,101,1,0,0,0,96,97,10,5,0,0,97,98,
		7,0,0,0,98,100,3,18,9,6,99,96,1,0,0,0,100,103,1,0,0,0,101,99,1,0,0,0,101,
		102,1,0,0,0,102,19,1,0,0,0,103,101,1,0,0,0,104,107,5,2,0,0,105,107,5,3,
		0,0,106,104,1,0,0,0,106,105,1,0,0,0,107,21,1,0,0,0,11,25,35,41,51,55,60,
		68,76,94,101,106
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
